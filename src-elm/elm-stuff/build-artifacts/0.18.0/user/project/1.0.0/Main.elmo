var _user$project$Main$getArbitrageResponse = function (arbitrageResponse) {
	var _p0 = arbitrageResponse;
	if (_p0.ctor === 'Nothing') {
		return {spotRate: '', currencyPair: '', amountInSourceCurrency: '', amountInDestinationCurrencyUsingSpotRate: '', numberOfBitcoinsBoughtAtOrigin: '', amountInDestinationCurrencyAfterBitcoinSale: '', exchangeSource: '', exchangeDestination: '', sign: '', percentage: '', sourceHighestBidPrice: '', sourceLowestOfferPrice: '', targetHighestBidPrice: '', targetLowestOfferPrice: ''};
	} else {
		return _p0._0;
	}
};
var _user$project$Main$toEmpty = function (a) {
	var _p1 = a;
	if (_p1.ctor === 'Nothing') {
		return '';
	} else {
		return _p1._0;
	}
};
var _user$project$Main$errorMessageDecoder = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'error',
		_1: {
			ctor: '::',
			_0: 'message',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$Main$countryDDLB = F3(
	function (errorMessage, currentlySelectedCountry, supportedCountry) {
		return ((!_elm_lang$core$Native_Utils.eq(errorMessage, '')) && (_elm_lang$core$Native_Utils.eq(supportedCountry.country, currentlySelectedCountry) && (!_elm_lang$core$Native_Utils.eq(supportedCountry.country, '')))) ? A2(
			_elm_lang$html$Html$option,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$selected(true),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(supportedCountry.country),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(supportedCountry.country),
				_1: {ctor: '[]'}
			}) : (_elm_lang$core$Native_Utils.eq(supportedCountry.country, '') ? A2(
			_elm_lang$html$Html$option,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$selected(false),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(supportedCountry.country),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('-- select --'),
				_1: {ctor: '[]'}
			}) : A2(
			_elm_lang$html$Html$option,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$selected(false),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(supportedCountry.country),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(supportedCountry.country),
				_1: {ctor: '[]'}
			}));
	});
var _user$project$Main$showSpinner = function (model) {
	var _p2 = model.waitingResponse;
	if (_p2 === true) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('spinner'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('rect1'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('rect2'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('rect3'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('rect4'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('rect5'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	} else {
		return _elm_lang$html$Html$text('');
	}
};
var _user$project$Main$createOptionsForDDLB = F3(
	function (errorMessage, currentlySelectedExchange, exchange) {
		return ((!_elm_lang$core$Native_Utils.eq(errorMessage, '')) && (_elm_lang$core$Native_Utils.eq(exchange, currentlySelectedExchange) && (!_elm_lang$core$Native_Utils.eq(exchange, '')))) ? A2(
			_elm_lang$html$Html$option,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$selected(true),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(exchange),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(exchange),
				_1: {ctor: '[]'}
			}) : (_elm_lang$core$Native_Utils.eq(exchange, '') ? A2(
			_elm_lang$html$Html$option,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$selected(false),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(exchange),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('-- select --'),
				_1: {ctor: '[]'}
			}) : A2(
			_elm_lang$html$Html$option,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$selected(false),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(exchange),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(exchange),
				_1: {ctor: '[]'}
			}));
	});
var _user$project$Main$concatSymbolAndName = function (countryRecord) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		countryRecord.currencySymbol,
		A2(_elm_lang$core$Basics_ops['++'], ' - ', countryRecord.name));
};
var _user$project$Main$extractErrorMessageString = function (errorMessageDecoderResult) {
	var _p3 = errorMessageDecoderResult;
	if (_p3.ctor === 'Ok') {
		return _p3._0;
	} else {
		return A2(_elm_lang$core$Basics_ops['++'], 'DECODE ERROR : ', _p3._0);
	}
};
var _user$project$Main$httpErrorString = function (error) {
	var _p4 = error;
	switch (_p4.ctor) {
		case 'BadUrl':
			return A2(_elm_lang$core$Basics_ops['++'], 'Bad Url: ', _p4._0);
		case 'Timeout':
			return 'Http Timeout';
		case 'NetworkError':
			return 'Network Error';
		case 'BadStatus':
			return _user$project$Main$extractErrorMessageString(
				A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Main$errorMessageDecoder, _p4._0.body));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'Bad Http Payload: ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p4._0),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' (',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p4._1.status.code),
							')'))));
	}
};
var _user$project$Main$dealWithEmptyString = function (str) {
	var _p5 = str;
	if (_p5.ctor === 'Nothing') {
		return '';
	} else {
		return _p5._0;
	}
};
var _user$project$Main$dealWithEmptyList = function (list) {
	var _p6 = list;
	if (_p6.ctor === 'Nothing') {
		return {
			ctor: '::',
			_0: '',
			_1: {ctor: '[]'}
		};
	} else {
		return {ctor: '::', _0: '', _1: _p6._0};
	}
};
var _user$project$Main$bySourceCountry = F2(
	function (country, supportedCountry) {
		return _elm_lang$core$Native_Utils.eq(country, supportedCountry.country);
	});
var _user$project$Main$getExchangesForCountry = F2(
	function (country, list) {
		return _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.exchanges;
				},
				A2(
					_elm_lang$core$List$filter,
					_user$project$Main$bySourceCountry(country),
					list)));
	});
var _user$project$Main$getCurrencyForCountry = F2(
	function (country, list) {
		return _user$project$Main$dealWithEmptyString(
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$map,
					_user$project$Main$concatSymbolAndName,
					A2(
						_elm_lang$core$List$filter,
						_user$project$Main$bySourceCountry(country),
						list))));
	});
var _user$project$Main$emptyCountry = {
	country: '',
	currencySymbol: '',
	name: '',
	exchanges: {
		ctor: '::',
		_0: '',
		_1: {ctor: '[]'}
	}
};
var _user$project$Main$initModel = {
	sourceCountry: _elm_lang$core$Maybe$Nothing,
	sourceCurrency: '',
	sourceExchange: _elm_lang$core$Maybe$Nothing,
	targetCountry: _elm_lang$core$Maybe$Nothing,
	targetCurrency: '',
	targetExchange: _elm_lang$core$Maybe$Nothing,
	sourcePossibleExchanges: _elm_lang$core$Maybe$Nothing,
	targetPossibleExchanges: _elm_lang$core$Maybe$Nothing,
	amount: '1000.00',
	countriesList: {
		ctor: '::',
		_0: _user$project$Main$emptyCountry,
		_1: {ctor: '[]'}
	},
	arbitrageResponse: _elm_lang$core$Maybe$Nothing,
	waitingResponse: false,
	errorMessage: ''
};
var _user$project$Main$_p7 = _user$project$StyleTypes$cssNameSpace;
var _user$project$Main$id = _user$project$Main$_p7.id;
var _user$project$Main$class = _user$project$Main$_p7.$class;
var _user$project$Main$classList = _user$project$Main$_p7.classList;
var _user$project$Main$getSignDIV = function (arbitrageResponse) {
	return _elm_lang$core$Native_Utils.eq(arbitrageResponse.sign, '+') ? A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _user$project$Main$class(
				{
					ctor: '::',
					_0: _user$project$StyleTypes$TopResult,
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$src('/assets/arrowup.gif'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$height(30),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$width(30),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Bitcoin is beating spot rate by '),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(arbitrageResponse.percentage),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		}) : (_elm_lang$core$Native_Utils.eq(arbitrageResponse.sign, '-') ? A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _user$project$Main$class(
				{
					ctor: '::',
					_0: _user$project$StyleTypes$TopResult,
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$src('/assets/arrowdown.gif'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$height(30),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$width(30),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Bitcoin is losing to spot rate by '),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(arbitrageResponse.percentage),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		}) : A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{ctor: '[]'}));
};
var _user$project$Main$showResult = function (model) {
	var _p8 = model.arbitrageResponse;
	if (_p8.ctor === 'Nothing') {
		return (!_elm_lang$core$Native_Utils.eq(model.errorMessage, '')) ? A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _user$project$Main$class(
							{
								ctor: '::',
								_0: _user$project$StyleTypes$Error,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(model.errorMessage),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}) : _elm_lang$html$Html$text('');
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Main$class(
					{
						ctor: '::',
						_0: _user$project$StyleTypes$Result,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _user$project$Main$getSignDIV(
					_user$project$Main$getArbitrageResponse(model.arbitrageResponse)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Main$class(
								{
									ctor: '::',
									_0: _user$project$StyleTypes$BottomResult,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Main$class(
										{
											ctor: '::',
											_0: _user$project$StyleTypes$Rowgrid,
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _user$project$Main$class(
												{
													ctor: '::',
													_0: _user$project$StyleTypes$CRol,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Spot Rate:'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _user$project$Main$class(
													{
														ctor: '::',
														_0: _user$project$StyleTypes$CRol,
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(
														_elm_lang$core$Basics_ops['++'],
														_user$project$Main$getArbitrageResponse(model.arbitrageResponse).currencyPair,
														A2(
															_elm_lang$core$Basics_ops['++'],
															' ',
															_user$project$Main$getArbitrageResponse(model.arbitrageResponse).spotRate))),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _user$project$Main$class(
											{
												ctor: '::',
												_0: _user$project$StyleTypes$Rowgrid,
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _user$project$Main$class(
													{
														ctor: '::',
														_0: _user$project$StyleTypes$CRol,
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Amount in source currency:'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _user$project$Main$class(
														{
															ctor: '::',
															_0: _user$project$StyleTypes$CRol,
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														_user$project$Main$getArbitrageResponse(model.arbitrageResponse).amountInSourceCurrency),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _user$project$Main$class(
												{
													ctor: '::',
													_0: _user$project$StyleTypes$Rowgrid,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _user$project$Main$class(
														{
															ctor: '::',
															_0: _user$project$StyleTypes$CRol,
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Amount in target currency using SPOT RATE:'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _user$project$Main$class(
															{
																ctor: '::',
																_0: _user$project$StyleTypes$CRol,
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(
															_user$project$Main$getArbitrageResponse(model.arbitrageResponse).amountInDestinationCurrencyUsingSpotRate),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _user$project$Main$class(
													{
														ctor: '::',
														_0: _user$project$StyleTypes$Rowgrid,
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _user$project$Main$class(
															{
																ctor: '::',
																_0: _user$project$StyleTypes$CRol,
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Amount in target currency using BITCOIN:'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _user$project$Main$class(
																{
																	ctor: '::',
																	_0: _user$project$StyleTypes$CRol,
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																_user$project$Main$getArbitrageResponse(model.arbitrageResponse).amountInDestinationCurrencyAfterBitcoinSale),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _user$project$Main$class(
														{
															ctor: '::',
															_0: _user$project$StyleTypes$Rowgrid,
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _user$project$Main$class(
																{
																	ctor: '::',
																	_0: _user$project$StyleTypes$CRol,
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Bitcoins bought at source country:'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _user$project$Main$class(
																	{
																		ctor: '::',
																		_0: _user$project$StyleTypes$CRol,
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	_user$project$Main$getArbitrageResponse(model.arbitrageResponse).numberOfBitcoinsBoughtAtOrigin),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _user$project$Main$class(
															{
																ctor: '::',
																_0: _user$project$StyleTypes$Rowgrid,
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _user$project$Main$class(
																	{
																		ctor: '::',
																		_0: _user$project$StyleTypes$CRol,
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Source exchange:'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _user$project$Main$class(
																		{
																			ctor: '::',
																			_0: _user$project$StyleTypes$CRol,
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(
																		_user$project$Main$getArbitrageResponse(model.arbitrageResponse).exchangeSource),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _user$project$Main$class(
																{
																	ctor: '::',
																	_0: _user$project$StyleTypes$Rowgrid,
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _user$project$Main$class(
																		{
																			ctor: '::',
																			_0: _user$project$StyleTypes$CRol,
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Target exchange:'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _user$project$Main$class(
																			{
																				ctor: '::',
																				_0: _user$project$StyleTypes$CRol,
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(
																			_user$project$Main$getArbitrageResponse(model.arbitrageResponse).exchangeDestination),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _user$project$Main$class(
																	{
																		ctor: '::',
																		_0: _user$project$StyleTypes$Rowgrid,
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _user$project$Main$class(
																			{
																				ctor: '::',
																				_0: _user$project$StyleTypes$CRol,
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Source highest bid price:'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _user$project$Main$class(
																				{
																					ctor: '::',
																					_0: _user$project$StyleTypes$CRol,
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(
																				_user$project$Main$getArbitrageResponse(model.arbitrageResponse).sourceHighestBidPrice),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _user$project$Main$class(
																		{
																			ctor: '::',
																			_0: _user$project$StyleTypes$Rowgrid,
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _user$project$Main$class(
																				{
																					ctor: '::',
																					_0: _user$project$StyleTypes$CRol,
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Target highest bid price:'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$div,
																			{
																				ctor: '::',
																				_0: _user$project$Main$class(
																					{
																						ctor: '::',
																						_0: _user$project$StyleTypes$CRol,
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(
																					_user$project$Main$getArbitrageResponse(model.arbitrageResponse).targetHighestBidPrice),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _user$project$Main$class(
																			{
																				ctor: '::',
																				_0: _user$project$StyleTypes$Rowgrid,
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$div,
																			{
																				ctor: '::',
																				_0: _user$project$Main$class(
																					{
																						ctor: '::',
																						_0: _user$project$StyleTypes$CRol,
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Source lowest offer price:'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$div,
																				{
																					ctor: '::',
																					_0: _user$project$Main$class(
																						{
																							ctor: '::',
																							_0: _user$project$StyleTypes$CRol,
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_user$project$Main$getArbitrageResponse(model.arbitrageResponse).sourceLowestOfferPrice),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _user$project$Main$class(
																				{
																					ctor: '::',
																					_0: _user$project$StyleTypes$Rowgrid,
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$div,
																				{
																					ctor: '::',
																					_0: _user$project$Main$class(
																						{
																							ctor: '::',
																							_0: _user$project$StyleTypes$CRol,
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Target lowest offer price:'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$div,
																					{
																						ctor: '::',
																						_0: _user$project$Main$class(
																							{
																								ctor: '::',
																								_0: _user$project$StyleTypes$CRol,
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(
																							_user$project$Main$getArbitrageResponse(model.arbitrageResponse).targetLowestOfferPrice),
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	}
};
var _user$project$Main$SupportedCountry = F4(
	function (a, b, c, d) {
		return {country: a, currencySymbol: b, name: c, exchanges: d};
	});
var _user$project$Main$supportedCountryDecoder = A5(
	_elm_lang$core$Json_Decode$map4,
	_user$project$Main$SupportedCountry,
	A2(_elm_lang$core$Json_Decode$field, 'country', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'currencySymbol', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$field,
		'exchanges',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
var _user$project$Main$supportedCountriesDecoder = _elm_lang$core$Json_Decode$list(_user$project$Main$supportedCountryDecoder);
var _user$project$Main$ArbitrageResponse = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return {spotRate: a, currencyPair: b, amountInSourceCurrency: c, amountInDestinationCurrencyUsingSpotRate: d, numberOfBitcoinsBoughtAtOrigin: e, amountInDestinationCurrencyAfterBitcoinSale: f, exchangeSource: g, exchangeDestination: h, sign: i, percentage: j, sourceHighestBidPrice: k, sourceLowestOfferPrice: l, targetHighestBidPrice: m, targetLowestOfferPrice: n};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Main$arbitrageResponseDecoder = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'data',
		_1: {ctor: '[]'}
	},
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'targetLowestOfferPrice',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'targetHighestBidPrice',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'sourceLowestOfferPrice',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'sourceHighestBidPrice',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'percentage',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'sign',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'exchangeDestination',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'exchangeSource',
									_elm_lang$core$Json_Decode$string,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'amountInDestinationCurrencyAfterBitcoinSale',
										_elm_lang$core$Json_Decode$string,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'numberOfBitcoinsBoughtAtOrigin',
											_elm_lang$core$Json_Decode$string,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'amountInDestinationCurrencyUsingSpotRate',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'amountInSourceCurrency',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'currencyPair',
														_elm_lang$core$Json_Decode$string,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'spotRate',
															_elm_lang$core$Json_Decode$string,
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$ArbitrageResponse))))))))))))))));
var _user$project$Main$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {sourceCountry: a, sourceCurrency: b, sourceExchange: c, targetCountry: d, targetCurrency: e, targetExchange: f, amount: g, sourcePossibleExchanges: h, targetPossibleExchanges: i, countriesList: j, arbitrageResponse: k, waitingResponse: l, errorMessage: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Main$InputAmount = function (a) {
	return {ctor: 'InputAmount', _0: a};
};
var _user$project$Main$SelectSourceExchange = {ctor: 'SelectSourceExchange'};
var _user$project$Main$TargetExchangeSelected = function (a) {
	return {ctor: 'TargetExchangeSelected', _0: a};
};
var _user$project$Main$SourceExchangeSelected = function (a) {
	return {ctor: 'SourceExchangeSelected', _0: a};
};
var _user$project$Main$TargetCountrySelected = function (a) {
	return {ctor: 'TargetCountrySelected', _0: a};
};
var _user$project$Main$SourceCountrySelected = function (a) {
	return {ctor: 'SourceCountrySelected', _0: a};
};
var _user$project$Main$showInputForm = function (model) {
	var _p9 = model.arbitrageResponse;
	if (_p9.ctor === 'Nothing') {
		return _elm_lang$core$Native_Utils.eq(model.waitingResponse, false) ? A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _user$project$Main$class(
							{
								ctor: '::',
								_0: _user$project$StyleTypes$SourceCountry,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _user$project$Main$class(
									{
										ctor: '::',
										_0: _user$project$StyleTypes$FormLine,
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Source country: '),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$select,
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html_Events$on,
												'change',
												A2(_elm_lang$core$Json_Decode$map, _user$project$Main$SourceCountrySelected, _elm_lang$html$Html_Events$targetValue)),
											_1: {ctor: '[]'}
										},
										A2(
											_elm_lang$core$List$map,
											A2(
												_user$project$Main$countryDDLB,
												model.errorMessage,
												_user$project$Main$toEmpty(model.sourceCountry)),
											{ctor: '::', _0: _user$project$Main$emptyCountry, _1: model.countriesList})),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Main$class(
										{
											ctor: '::',
											_0: _user$project$StyleTypes$FormLine,
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_elm_lang$core$Basics_ops['++'], 'Currency: ', model.sourceCurrency)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _user$project$Main$class(
											{
												ctor: '::',
												_0: _user$project$StyleTypes$FormLine,
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Exchange: '),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$select,
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html_Events$on,
														'change',
														A2(_elm_lang$core$Json_Decode$map, _user$project$Main$SourceExchangeSelected, _elm_lang$html$Html_Events$targetValue)),
													_1: {ctor: '[]'}
												},
												A2(
													_elm_lang$core$List$map,
													A2(
														_user$project$Main$createOptionsForDDLB,
														model.errorMessage,
														_user$project$Main$toEmpty(model.sourceExchange)),
													_user$project$Main$dealWithEmptyList(model.sourcePossibleExchanges))),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _user$project$Main$class(
												{
													ctor: '::',
													_0: _user$project$StyleTypes$FormLine,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Amount: '),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$input,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$type_('text'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$placeholder('0.00'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$InputAmount),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$value(model.amount),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Main$class(
								{
									ctor: '::',
									_0: _user$project$StyleTypes$TargetCountry,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Main$class(
										{
											ctor: '::',
											_0: _user$project$StyleTypes$FormLine,
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Target country: '),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$select,
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html_Events$on,
													'change',
													A2(_elm_lang$core$Json_Decode$map, _user$project$Main$TargetCountrySelected, _elm_lang$html$Html_Events$targetValue)),
												_1: {ctor: '[]'}
											},
											A2(
												_elm_lang$core$List$map,
												A2(
													_user$project$Main$countryDDLB,
													model.errorMessage,
													_user$project$Main$toEmpty(model.targetCountry)),
												{ctor: '::', _0: _user$project$Main$emptyCountry, _1: model.countriesList})),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _user$project$Main$class(
											{
												ctor: '::',
												_0: _user$project$StyleTypes$FormLine,
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_elm_lang$core$Basics_ops['++'], 'Currency: ', model.targetCurrency)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _user$project$Main$class(
												{
													ctor: '::',
													_0: _user$project$StyleTypes$FormLine,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Exchange: '),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$select,
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html_Events$on,
															'change',
															A2(_elm_lang$core$Json_Decode$map, _user$project$Main$TargetExchangeSelected, _elm_lang$html$Html_Events$targetValue)),
														_1: {ctor: '[]'}
													},
													A2(
														_elm_lang$core$List$map,
														A2(
															_user$project$Main$createOptionsForDDLB,
															model.errorMessage,
															_user$project$Main$toEmpty(model.targetExchange)),
														_user$project$Main$dealWithEmptyList(model.targetPossibleExchanges))),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}) : _elm_lang$html$Html$text('');
	} else {
		return _elm_lang$html$Html$text('');
	}
};
var _user$project$Main$DetailResponseExpandOrContract = {ctor: 'DetailResponseExpandOrContract'};
var _user$project$Main$ClearArbitrageResult = {ctor: 'ClearArbitrageResult'};
var _user$project$Main$FetchArbitrageResult = {ctor: 'FetchArbitrageResult'};
var _user$project$Main$showButton = function (model) {
	var _p10 = model.arbitrageResponse;
	if (_p10.ctor === 'Nothing') {
		return _elm_lang$core$Native_Utils.eq(model.waitingResponse, false) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Main$class(
					{
						ctor: '::',
						_0: _user$project$StyleTypes$ButtonDiv,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _user$project$Main$class(
							{
								ctor: '::',
								_0: _user$project$StyleTypes$Button,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$FetchArbitrageResult),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Go'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}) : _elm_lang$html$Html$text('');
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Main$class(
					{
						ctor: '::',
						_0: _user$project$StyleTypes$ButtonDiv,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _user$project$Main$class(
							{
								ctor: '::',
								_0: _user$project$StyleTypes$Button,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$ClearArbitrageResult),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Clear'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	}
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$Main$showInputForm(model),
			_1: {
				ctor: '::',
				_0: _user$project$Main$showResult(model),
				_1: {
					ctor: '::',
					_0: _user$project$Main$showSpinner(model),
					_1: {
						ctor: '::',
						_0: _user$project$Main$showButton(model),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$ArbitrageRequested = function (a) {
	return {ctor: 'ArbitrageRequested', _0: a};
};
var _user$project$Main$postRequestCommand = function (model) {
	var url = A2(
		_elm_lang$core$Basics_ops['++'],
		'/api/arbitrage?sourceCountry=',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Main$toEmpty(model.sourceCountry),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'&targetCountry=',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Main$toEmpty(model.targetCountry),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'&amount=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							model.amount,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'&sourceExchange=',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Main$toEmpty(model.sourceExchange),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'&targetExchange=',
										_user$project$Main$toEmpty(model.targetExchange))))))))));
	var request = A2(_elm_lang$http$Http$get, url, _user$project$Main$arbitrageResponseDecoder);
	var cmd = A2(_elm_lang$http$Http$send, _user$project$Main$ArbitrageRequested, request);
	return cmd;
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p11 = msg;
		switch (_p11.ctor) {
			case 'SupportedCountriesRequested':
				if (_p11._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{countriesList: _p11._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SourceCountrySelected':
				var _p12 = _p11._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							sourceCountry: _elm_lang$core$Maybe$Just(_p12),
							sourceCurrency: A2(_user$project$Main$getCurrencyForCountry, _p12, model.countriesList),
							sourcePossibleExchanges: A2(_user$project$Main$getExchangesForCountry, _p12, model.countriesList),
							sourceExchange: _elm_lang$core$Maybe$Just('')
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ArbitrageRequested':
				if (_p11._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								arbitrageResponse: _elm_lang$core$Maybe$Just(_p11._0._0),
								errorMessage: '',
								waitingResponse: false
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								errorMessage: _user$project$Main$httpErrorString(_p11._0._0),
								waitingResponse: false
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'TargetCountrySelected':
				var _p13 = _p11._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							targetCountry: _elm_lang$core$Maybe$Just(_p13),
							targetCurrency: A2(_user$project$Main$getCurrencyForCountry, _p13, model.countriesList),
							targetPossibleExchanges: A2(_user$project$Main$getExchangesForCountry, _p13, model.countriesList),
							targetExchange: _elm_lang$core$Maybe$Just('')
						}),
					{ctor: '[]'});
			case 'SourceExchangeSelected':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							sourceExchange: _elm_lang$core$Maybe$Just(_p11._0)
						}),
					{ctor: '[]'});
			case 'TargetExchangeSelected':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							targetExchange: _elm_lang$core$Maybe$Just(_p11._0)
						}),
					{ctor: '[]'});
			case 'InputAmount':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{amount: _p11._0}),
					{ctor: '[]'});
			case 'FetchArbitrageResult':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{arbitrageResponse: _elm_lang$core$Maybe$Nothing, waitingResponse: true, errorMessage: ''}),
					{
						ctor: '::',
						_0: _user$project$Main$postRequestCommand(model),
						_1: {ctor: '[]'}
					});
			case 'ClearArbitrageResult':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{sourceCountry: _elm_lang$core$Maybe$Nothing, sourceCurrency: '', sourceExchange: _elm_lang$core$Maybe$Nothing, targetCountry: _elm_lang$core$Maybe$Nothing, targetCurrency: '', targetExchange: _elm_lang$core$Maybe$Nothing, amount: '1000.00', arbitrageResponse: _elm_lang$core$Maybe$Nothing, waitingResponse: false, errorMessage: ''}),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
		}
	});
var _user$project$Main$SupportedCountriesRequested = function (a) {
	return {ctor: 'SupportedCountriesRequested', _0: a};
};
var _user$project$Main$getSupportedCountriesCommand = function () {
	var url = '/api/countries';
	var request = A2(_elm_lang$http$Http$get, url, _user$project$Main$supportedCountriesDecoder);
	var cmd = A2(_elm_lang$http$Http$send, _user$project$Main$SupportedCountriesRequested, request);
	return cmd;
}();
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$initModel, _1: _user$project$Main$getSupportedCountriesCommand};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		view: _user$project$Main$view,
		update: _user$project$Main$update,
		subscriptions: function (_p14) {
			return _elm_lang$core$Platform_Sub$none;
		},
		init: _user$project$Main$init
	})();
var _user$project$Main$Clear = {ctor: 'Clear'};
